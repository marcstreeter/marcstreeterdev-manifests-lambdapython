# Tiltfile for {{ project_name }}

# checks
allow_k8s_contexts('docker-desktop')

# extensions
load('ext://dotenv', 'dotenv')

# environment variables
DOTENV = dotenv() or {}

# Define the Docker image for the Lambda service
docker_build(
  '{{ project_lambda }}',
  '.',
  dockerfile='Dockerfile',
  # entrypoint=["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m", "main"],
  live_update=[
    sync('./src', '/var/task/src'),
  ]
)

# Define the interface service using nginx image
docker_build(
  '{{ project_interface }}',
  '.',
  dockerfile='interface/Dockerfile',
  live_update=[
    sync('interface/index.html', '/usr/share/nginx/html/index.html'),
    sync('interface/openapi.yaml', '/usr/share/nginx/html/openapi.yaml'),
    sync('interface/nginx.conf', '/etc/nginx/nginx.conf'),
  ]
)

# Use Helm to deploy the Lambda service
k8s_yaml(
  helm(
      'manifests',
      namespace='default',
      values=[
          'manifests/values.yaml'
      ],
      set=[
          'project_name={{ project_kebab }}',
          'environment=development'
      ]
  )
)
# Forward the container port {{ lambda_port }} to the host port {{ tilt_lambda_port }}
k8s_resource(
    workload='{{ project_lambda }}',
    port_forwards=[
        '{{ tilt_lambda_port }}:{{ lambda_port }}',  # {{ lambda_port_name }}  port
        # "{{ tilt_lambda_port_debug }}:{{ lambda_port_debug }}" # {{ lambda_port_debug_name }} port
    ],
)
# Forward the container port {{ interface_port }} to the host port {{ tilt_interface_port }}
k8s_resource(
  workload='{{ project_interface }}',
  port_forwards=[
    '{{ tilt_interface_port }}:{{ interface_port }}', # {{ interface_port_name }} port
  ],
  resource_deps=['{{ project_lambda }}']
)